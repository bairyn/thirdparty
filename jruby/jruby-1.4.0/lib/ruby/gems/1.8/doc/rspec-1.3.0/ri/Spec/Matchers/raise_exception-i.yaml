--- !ruby/object:RI::MethodDescription 
aliases: 
  - !ruby/object:RI::AliasName 
    name: raise_error
block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: With no args, matches if any exception is raised. With a named exception, matches only if that specific exception is raised. With a named exception and messsage specified as a String, matches only if both match. With a named exception and messsage specified as a Regexp, matches only if both match. Pass an optional block to perform extra verifications on the exception matched
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: Examples
  - !ruby/struct:SM::Flow::VERB 
    body: "  lambda { do_something_risky }.should raise_exception\n  lambda { do_something_risky }.should raise_exception(PoorRiskDecisionError)\n  lambda { do_something_risky }.should raise_exception(PoorRiskDecisionError) { |exception| exception.data.should == 42 }\n  lambda { do_something_risky }.should raise_exception(PoorRiskDecisionError, &quot;that was too risky&quot;)\n  lambda { do_something_risky }.should raise_exception(PoorRiskDecisionError, /oo ri/)\n\n  lambda { do_something_risky }.should_not raise_exception\n  lambda { do_something_risky }.should_not raise_exception(PoorRiskDecisionError)\n  lambda { do_something_risky }.should_not raise_exception(PoorRiskDecisionError, &quot;that was too risky&quot;)\n  lambda { do_something_risky }.should_not raise_exception(PoorRiskDecisionError, /oo ri/)\n"
full_name: Spec::Matchers#raise_exception
is_singleton: false
name: raise_exception
params: |
  should raise_exception()
  should raise_exception(NamedError)
  should raise_exception(NamedError, String)
  should raise_exception(NamedError, Regexp)
  should raise_exception() { |exception| ... }
  should raise_exception(NamedError) { |exception| ... }
  should raise_exception(NamedError, String) { |exception| ... }
  should raise_exception(NamedError, Regexp) { |exception| ... }
  should_not raise_exception()
  should_not raise_exception(NamedError)
  should_not raise_exception(NamedError, String)
  should_not raise_exception(NamedError, Regexp)

visibility: public
