--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: included
comment: 
  - !ruby/struct:SM::Flow::P 
    body: The base module for Haml filters. User-defined filters should be modules including this module. The name of the filter is taken by downcasing the module name. For instance, if the module is named `FooBar`, the filter will be `:foobar`.
  - !ruby/struct:SM::Flow::P 
    body: "A user-defined filter should override either \\{#render} or {\\#compile}. \\{#render} is the most common. It takes a string, the filter source, and returns another string, the result of the filter. For example, the following will define a filter named `:sass`:"
  - !ruby/struct:SM::Flow::VERB 
    body: "    module Haml::Filters::Sass\n      include Haml::Filters::Base\n\n      def render(text)\n        ::Sass::Engine.new(text).render\n      end\n    end\n"
  - !ruby/struct:SM::Flow::P 
    body: For details on overriding \{#compile}, see its documentation.
  - !ruby/struct:SM::Flow::P 
    body: Note that filters overriding \{#render} automatically support `#{}` for interpolating Ruby code. Those overriding \{#compile} will need to add such support manually if it's desired.
constants: []

full_name: Haml::Filters::Base
includes: []

instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: compile
  - !ruby/object:RI::MethodSummary 
    name: internal_compile
  - !ruby/object:RI::MethodSummary 
    name: lazy_require
  - !ruby/object:RI::MethodSummary 
    name: render
  - !ruby/object:RI::MethodSummary 
    name: render_with_options
name: Base
superclass: 
