--- !ruby/object:RI::ClassDescription 
attributes: 
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: "An #OpenID::Message with the data to be returned. Keys are parameter names with no leading openid. e.g. identity and mac_key never openid.identity."
    name: fields
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: "The #OpenIDRequest I respond to."
    name: request
    rw: RW
class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: new
comment: 
  - !ruby/struct:SM::Flow::P 
    body: I am a response to an OpenID request.
  - !ruby/struct:SM::Flow::P 
    body: "Attributes:"
  - !ruby/object:SM::Flow::LIST 
    contents: 
      - !ruby/struct:SM::Flow::LI 
        label: "signed:"
        body: A list of the names of the fields which should be signed.
    type: :NOTE
  - !ruby/struct:SM::Flow::P 
    body: "Implementer's note: In a more symmetric client/server implementation, there would be more types of #OpenIDResponse object and they would have validated attributes according to the type of response. But as it is, Response objects in a server are basically write-only, their only job is to go out over the wire, so this is just a loose wrapper around #OpenIDResponse.fields."
constants: []

full_name: OpenID::Server::OpenIDResponse
includes: []

instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: add_extension
  - !ruby/object:RI::MethodSummary 
    name: copy
  - !ruby/object:RI::MethodSummary 
    name: encode_to_kvform
  - !ruby/object:RI::MethodSummary 
    name: encode_to_url
  - !ruby/object:RI::MethodSummary 
    name: needs_signing
  - !ruby/object:RI::MethodSummary 
    name: render_as_form
  - !ruby/object:RI::MethodSummary 
    name: to_form_markup
  - !ruby/object:RI::MethodSummary 
    name: to_html
  - !ruby/object:RI::MethodSummary 
    name: to_s
  - !ruby/object:RI::MethodSummary 
    name: which_encoding
name: OpenIDResponse
superclass: Object
